/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.geo.festival;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-05-07")
public class Ticket implements org.apache.thrift.TBase<Ticket, Ticket._Fields>, java.io.Serializable, Cloneable, Comparable<Ticket> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Ticket");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CONCERT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("concertId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CLIENT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("clientName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField BUY_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("buyDate", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField NUM_OF_SEATS_FIELD_DESC = new org.apache.thrift.protocol.TField("numOfSeats", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TicketStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TicketTupleSchemeFactory();

  public int id; // required
  public int concertId; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String clientName; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String buyDate; // required
  public int numOfSeats; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    CONCERT_ID((short)2, "concertId"),
    CLIENT_NAME((short)3, "clientName"),
    BUY_DATE((short)4, "buyDate"),
    NUM_OF_SEATS((short)5, "numOfSeats");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CONCERT_ID
          return CONCERT_ID;
        case 3: // CLIENT_NAME
          return CLIENT_NAME;
        case 4: // BUY_DATE
          return BUY_DATE;
        case 5: // NUM_OF_SEATS
          return NUM_OF_SEATS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __CONCERTID_ISSET_ID = 1;
  private static final int __NUMOFSEATS_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONCERT_ID, new org.apache.thrift.meta_data.FieldMetaData("concertId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CLIENT_NAME, new org.apache.thrift.meta_data.FieldMetaData("clientName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUY_DATE, new org.apache.thrift.meta_data.FieldMetaData("buyDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUM_OF_SEATS, new org.apache.thrift.meta_data.FieldMetaData("numOfSeats", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Ticket.class, metaDataMap);
  }

  public Ticket() {
  }

  public Ticket(
    int id,
    int concertId,
    java.lang.String clientName,
    java.lang.String buyDate,
    int numOfSeats)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.concertId = concertId;
    setConcertIdIsSet(true);
    this.clientName = clientName;
    this.buyDate = buyDate;
    this.numOfSeats = numOfSeats;
    setNumOfSeatsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Ticket(Ticket other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.concertId = other.concertId;
    if (other.isSetClientName()) {
      this.clientName = other.clientName;
    }
    if (other.isSetBuyDate()) {
      this.buyDate = other.buyDate;
    }
    this.numOfSeats = other.numOfSeats;
  }

  public Ticket deepCopy() {
    return new Ticket(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setConcertIdIsSet(false);
    this.concertId = 0;
    this.clientName = null;
    this.buyDate = null;
    setNumOfSeatsIsSet(false);
    this.numOfSeats = 0;
  }

  public int getId() {
    return this.id;
  }

  public Ticket setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getConcertId() {
    return this.concertId;
  }

  public Ticket setConcertId(int concertId) {
    this.concertId = concertId;
    setConcertIdIsSet(true);
    return this;
  }

  public void unsetConcertId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONCERTID_ISSET_ID);
  }

  /** Returns true if field concertId is set (has been assigned a value) and false otherwise */
  public boolean isSetConcertId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONCERTID_ISSET_ID);
  }

  public void setConcertIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONCERTID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getClientName() {
    return this.clientName;
  }

  public Ticket setClientName(@org.apache.thrift.annotation.Nullable java.lang.String clientName) {
    this.clientName = clientName;
    return this;
  }

  public void unsetClientName() {
    this.clientName = null;
  }

  /** Returns true if field clientName is set (has been assigned a value) and false otherwise */
  public boolean isSetClientName() {
    return this.clientName != null;
  }

  public void setClientNameIsSet(boolean value) {
    if (!value) {
      this.clientName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getBuyDate() {
    return this.buyDate;
  }

  public Ticket setBuyDate(@org.apache.thrift.annotation.Nullable java.lang.String buyDate) {
    this.buyDate = buyDate;
    return this;
  }

  public void unsetBuyDate() {
    this.buyDate = null;
  }

  /** Returns true if field buyDate is set (has been assigned a value) and false otherwise */
  public boolean isSetBuyDate() {
    return this.buyDate != null;
  }

  public void setBuyDateIsSet(boolean value) {
    if (!value) {
      this.buyDate = null;
    }
  }

  public int getNumOfSeats() {
    return this.numOfSeats;
  }

  public Ticket setNumOfSeats(int numOfSeats) {
    this.numOfSeats = numOfSeats;
    setNumOfSeatsIsSet(true);
    return this;
  }

  public void unsetNumOfSeats() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMOFSEATS_ISSET_ID);
  }

  /** Returns true if field numOfSeats is set (has been assigned a value) and false otherwise */
  public boolean isSetNumOfSeats() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMOFSEATS_ISSET_ID);
  }

  public void setNumOfSeatsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMOFSEATS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Integer)value);
      }
      break;

    case CONCERT_ID:
      if (value == null) {
        unsetConcertId();
      } else {
        setConcertId((java.lang.Integer)value);
      }
      break;

    case CLIENT_NAME:
      if (value == null) {
        unsetClientName();
      } else {
        setClientName((java.lang.String)value);
      }
      break;

    case BUY_DATE:
      if (value == null) {
        unsetBuyDate();
      } else {
        setBuyDate((java.lang.String)value);
      }
      break;

    case NUM_OF_SEATS:
      if (value == null) {
        unsetNumOfSeats();
      } else {
        setNumOfSeats((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case CONCERT_ID:
      return getConcertId();

    case CLIENT_NAME:
      return getClientName();

    case BUY_DATE:
      return getBuyDate();

    case NUM_OF_SEATS:
      return getNumOfSeats();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CONCERT_ID:
      return isSetConcertId();
    case CLIENT_NAME:
      return isSetClientName();
    case BUY_DATE:
      return isSetBuyDate();
    case NUM_OF_SEATS:
      return isSetNumOfSeats();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Ticket)
      return this.equals((Ticket)that);
    return false;
  }

  public boolean equals(Ticket that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_concertId = true;
    boolean that_present_concertId = true;
    if (this_present_concertId || that_present_concertId) {
      if (!(this_present_concertId && that_present_concertId))
        return false;
      if (this.concertId != that.concertId)
        return false;
    }

    boolean this_present_clientName = true && this.isSetClientName();
    boolean that_present_clientName = true && that.isSetClientName();
    if (this_present_clientName || that_present_clientName) {
      if (!(this_present_clientName && that_present_clientName))
        return false;
      if (!this.clientName.equals(that.clientName))
        return false;
    }

    boolean this_present_buyDate = true && this.isSetBuyDate();
    boolean that_present_buyDate = true && that.isSetBuyDate();
    if (this_present_buyDate || that_present_buyDate) {
      if (!(this_present_buyDate && that_present_buyDate))
        return false;
      if (!this.buyDate.equals(that.buyDate))
        return false;
    }

    boolean this_present_numOfSeats = true;
    boolean that_present_numOfSeats = true;
    if (this_present_numOfSeats || that_present_numOfSeats) {
      if (!(this_present_numOfSeats && that_present_numOfSeats))
        return false;
      if (this.numOfSeats != that.numOfSeats)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + concertId;

    hashCode = hashCode * 8191 + ((isSetClientName()) ? 131071 : 524287);
    if (isSetClientName())
      hashCode = hashCode * 8191 + clientName.hashCode();

    hashCode = hashCode * 8191 + ((isSetBuyDate()) ? 131071 : 524287);
    if (isSetBuyDate())
      hashCode = hashCode * 8191 + buyDate.hashCode();

    hashCode = hashCode * 8191 + numOfSeats;

    return hashCode;
  }

  @Override
  public int compareTo(Ticket other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetConcertId()).compareTo(other.isSetConcertId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConcertId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.concertId, other.concertId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetClientName()).compareTo(other.isSetClientName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientName, other.clientName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBuyDate()).compareTo(other.isSetBuyDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buyDate, other.buyDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNumOfSeats()).compareTo(other.isSetNumOfSeats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumOfSeats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numOfSeats, other.numOfSeats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Ticket(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("concertId:");
    sb.append(this.concertId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientName:");
    if (this.clientName == null) {
      sb.append("null");
    } else {
      sb.append(this.clientName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buyDate:");
    if (this.buyDate == null) {
      sb.append("null");
    } else {
      sb.append(this.buyDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("numOfSeats:");
    sb.append(this.numOfSeats);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TicketStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TicketStandardScheme getScheme() {
      return new TicketStandardScheme();
    }
  }

  private static class TicketStandardScheme extends org.apache.thrift.scheme.StandardScheme<Ticket> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Ticket struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONCERT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.concertId = iprot.readI32();
              struct.setConcertIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CLIENT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientName = iprot.readString();
              struct.setClientNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BUY_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.buyDate = iprot.readString();
              struct.setBuyDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NUM_OF_SEATS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numOfSeats = iprot.readI32();
              struct.setNumOfSeatsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Ticket struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONCERT_ID_FIELD_DESC);
      oprot.writeI32(struct.concertId);
      oprot.writeFieldEnd();
      if (struct.clientName != null) {
        oprot.writeFieldBegin(CLIENT_NAME_FIELD_DESC);
        oprot.writeString(struct.clientName);
        oprot.writeFieldEnd();
      }
      if (struct.buyDate != null) {
        oprot.writeFieldBegin(BUY_DATE_FIELD_DESC);
        oprot.writeString(struct.buyDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NUM_OF_SEATS_FIELD_DESC);
      oprot.writeI32(struct.numOfSeats);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TicketTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TicketTupleScheme getScheme() {
      return new TicketTupleScheme();
    }
  }

  private static class TicketTupleScheme extends org.apache.thrift.scheme.TupleScheme<Ticket> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Ticket struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetConcertId()) {
        optionals.set(1);
      }
      if (struct.isSetClientName()) {
        optionals.set(2);
      }
      if (struct.isSetBuyDate()) {
        optionals.set(3);
      }
      if (struct.isSetNumOfSeats()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetConcertId()) {
        oprot.writeI32(struct.concertId);
      }
      if (struct.isSetClientName()) {
        oprot.writeString(struct.clientName);
      }
      if (struct.isSetBuyDate()) {
        oprot.writeString(struct.buyDate);
      }
      if (struct.isSetNumOfSeats()) {
        oprot.writeI32(struct.numOfSeats);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Ticket struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.concertId = iprot.readI32();
        struct.setConcertIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.clientName = iprot.readString();
        struct.setClientNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.buyDate = iprot.readString();
        struct.setBuyDateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.numOfSeats = iprot.readI32();
        struct.setNumOfSeatsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

