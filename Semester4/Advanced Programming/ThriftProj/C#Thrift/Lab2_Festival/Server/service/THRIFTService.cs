/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Lab2_Festival
{
  public partial class THRIFTService {
    public interface ISync {
      bool validateLogIn(string userName, string password, int port);
      Concert findConcert(int concert);
      Ticket sellTicket(int concert, string clientName, string now, int numSeats);
      bool canSellTicket(int concId, int numTickets);
      List<DTOConcert> getConcertDtosByDate(string dateFilter);
      List<DTOConcert> getConcertDtos();
      Concert updateConcert(Concert conc);
      void notifyClients();
    }

    public interface Iface : ISync {
      #if SILVERLIGHT
      IAsyncResult Begin_validateLogIn(AsyncCallback callback, object state, string userName, string password, int port);
      bool End_validateLogIn(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_findConcert(AsyncCallback callback, object state, int concert);
      Concert End_findConcert(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_sellTicket(AsyncCallback callback, object state, int concert, string clientName, string now, int numSeats);
      Ticket End_sellTicket(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_canSellTicket(AsyncCallback callback, object state, int concId, int numTickets);
      bool End_canSellTicket(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_getConcertDtosByDate(AsyncCallback callback, object state, string dateFilter);
      List<DTOConcert> End_getConcertDtosByDate(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_getConcertDtos(AsyncCallback callback, object state);
      List<DTOConcert> End_getConcertDtos(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_updateConcert(AsyncCallback callback, object state, Concert conc);
      Concert End_updateConcert(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_notifyClients(AsyncCallback callback, object state);
      void End_notifyClients(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_validateLogIn(AsyncCallback callback, object state, string userName, string password, int port)
      {
        return send_validateLogIn(callback, state, userName, password, port);
      }

      public bool End_validateLogIn(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_validateLogIn();
      }

      #endif

      public bool validateLogIn(string userName, string password, int port)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_validateLogIn(null, null, userName, password, port);
        return End_validateLogIn(asyncResult);

        #else
        send_validateLogIn(userName, password, port);
        return recv_validateLogIn();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_validateLogIn(AsyncCallback callback, object state, string userName, string password, int port)
      {
        oprot_.WriteMessageBegin(new TMessage("validateLogIn", TMessageType.Call, seqid_));
        validateLogIn_args args = new validateLogIn_args();
        args.UserName = userName;
        args.Password = password;
        args.Port = port;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_validateLogIn(string userName, string password, int port)
      {
        oprot_.WriteMessageBegin(new TMessage("validateLogIn", TMessageType.Call, seqid_));
        validateLogIn_args args = new validateLogIn_args();
        args.UserName = userName;
        args.Password = password;
        args.Port = port;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public bool recv_validateLogIn()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        validateLogIn_result result = new validateLogIn_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "validateLogIn failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_findConcert(AsyncCallback callback, object state, int concert)
      {
        return send_findConcert(callback, state, concert);
      }

      public Concert End_findConcert(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_findConcert();
      }

      #endif

      public Concert findConcert(int concert)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_findConcert(null, null, concert);
        return End_findConcert(asyncResult);

        #else
        send_findConcert(concert);
        return recv_findConcert();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_findConcert(AsyncCallback callback, object state, int concert)
      {
        oprot_.WriteMessageBegin(new TMessage("findConcert", TMessageType.Call, seqid_));
        findConcert_args args = new findConcert_args();
        args.Concert = concert;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_findConcert(int concert)
      {
        oprot_.WriteMessageBegin(new TMessage("findConcert", TMessageType.Call, seqid_));
        findConcert_args args = new findConcert_args();
        args.Concert = concert;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public Concert recv_findConcert()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        findConcert_result result = new findConcert_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "findConcert failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_sellTicket(AsyncCallback callback, object state, int concert, string clientName, string now, int numSeats)
      {
        return send_sellTicket(callback, state, concert, clientName, now, numSeats);
      }

      public Ticket End_sellTicket(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_sellTicket();
      }

      #endif

      public Ticket sellTicket(int concert, string clientName, string now, int numSeats)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_sellTicket(null, null, concert, clientName, now, numSeats);
        return End_sellTicket(asyncResult);

        #else
        send_sellTicket(concert, clientName, now, numSeats);
        return recv_sellTicket();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_sellTicket(AsyncCallback callback, object state, int concert, string clientName, string now, int numSeats)
      {
        oprot_.WriteMessageBegin(new TMessage("sellTicket", TMessageType.Call, seqid_));
        sellTicket_args args = new sellTicket_args();
        args.Concert = concert;
        args.ClientName = clientName;
        args.Now = now;
        args.NumSeats = numSeats;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_sellTicket(int concert, string clientName, string now, int numSeats)
      {
        oprot_.WriteMessageBegin(new TMessage("sellTicket", TMessageType.Call, seqid_));
        sellTicket_args args = new sellTicket_args();
        args.Concert = concert;
        args.ClientName = clientName;
        args.Now = now;
        args.NumSeats = numSeats;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public Ticket recv_sellTicket()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        sellTicket_result result = new sellTicket_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sellTicket failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_canSellTicket(AsyncCallback callback, object state, int concId, int numTickets)
      {
        return send_canSellTicket(callback, state, concId, numTickets);
      }

      public bool End_canSellTicket(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_canSellTicket();
      }

      #endif

      public bool canSellTicket(int concId, int numTickets)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_canSellTicket(null, null, concId, numTickets);
        return End_canSellTicket(asyncResult);

        #else
        send_canSellTicket(concId, numTickets);
        return recv_canSellTicket();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_canSellTicket(AsyncCallback callback, object state, int concId, int numTickets)
      {
        oprot_.WriteMessageBegin(new TMessage("canSellTicket", TMessageType.Call, seqid_));
        canSellTicket_args args = new canSellTicket_args();
        args.ConcId = concId;
        args.NumTickets = numTickets;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_canSellTicket(int concId, int numTickets)
      {
        oprot_.WriteMessageBegin(new TMessage("canSellTicket", TMessageType.Call, seqid_));
        canSellTicket_args args = new canSellTicket_args();
        args.ConcId = concId;
        args.NumTickets = numTickets;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public bool recv_canSellTicket()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        canSellTicket_result result = new canSellTicket_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "canSellTicket failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_getConcertDtosByDate(AsyncCallback callback, object state, string dateFilter)
      {
        return send_getConcertDtosByDate(callback, state, dateFilter);
      }

      public List<DTOConcert> End_getConcertDtosByDate(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getConcertDtosByDate();
      }

      #endif

      public List<DTOConcert> getConcertDtosByDate(string dateFilter)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_getConcertDtosByDate(null, null, dateFilter);
        return End_getConcertDtosByDate(asyncResult);

        #else
        send_getConcertDtosByDate(dateFilter);
        return recv_getConcertDtosByDate();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getConcertDtosByDate(AsyncCallback callback, object state, string dateFilter)
      {
        oprot_.WriteMessageBegin(new TMessage("getConcertDtosByDate", TMessageType.Call, seqid_));
        getConcertDtosByDate_args args = new getConcertDtosByDate_args();
        args.DateFilter = dateFilter;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_getConcertDtosByDate(string dateFilter)
      {
        oprot_.WriteMessageBegin(new TMessage("getConcertDtosByDate", TMessageType.Call, seqid_));
        getConcertDtosByDate_args args = new getConcertDtosByDate_args();
        args.DateFilter = dateFilter;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public List<DTOConcert> recv_getConcertDtosByDate()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getConcertDtosByDate_result result = new getConcertDtosByDate_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getConcertDtosByDate failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_getConcertDtos(AsyncCallback callback, object state)
      {
        return send_getConcertDtos(callback, state);
      }

      public List<DTOConcert> End_getConcertDtos(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getConcertDtos();
      }

      #endif

      public List<DTOConcert> getConcertDtos()
      {
        #if SILVERLIGHT
        var asyncResult = Begin_getConcertDtos(null, null);
        return End_getConcertDtos(asyncResult);

        #else
        send_getConcertDtos();
        return recv_getConcertDtos();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getConcertDtos(AsyncCallback callback, object state)
      {
        oprot_.WriteMessageBegin(new TMessage("getConcertDtos", TMessageType.Call, seqid_));
        getConcertDtos_args args = new getConcertDtos_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_getConcertDtos()
      {
        oprot_.WriteMessageBegin(new TMessage("getConcertDtos", TMessageType.Call, seqid_));
        getConcertDtos_args args = new getConcertDtos_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public List<DTOConcert> recv_getConcertDtos()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getConcertDtos_result result = new getConcertDtos_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getConcertDtos failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_updateConcert(AsyncCallback callback, object state, Concert conc)
      {
        return send_updateConcert(callback, state, conc);
      }

      public Concert End_updateConcert(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_updateConcert();
      }

      #endif

      public Concert updateConcert(Concert conc)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_updateConcert(null, null, conc);
        return End_updateConcert(asyncResult);

        #else
        send_updateConcert(conc);
        return recv_updateConcert();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_updateConcert(AsyncCallback callback, object state, Concert conc)
      {
        oprot_.WriteMessageBegin(new TMessage("updateConcert", TMessageType.Call, seqid_));
        updateConcert_args args = new updateConcert_args();
        args.Conc = conc;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_updateConcert(Concert conc)
      {
        oprot_.WriteMessageBegin(new TMessage("updateConcert", TMessageType.Call, seqid_));
        updateConcert_args args = new updateConcert_args();
        args.Conc = conc;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public Concert recv_updateConcert()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateConcert_result result = new updateConcert_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateConcert failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_notifyClients(AsyncCallback callback, object state)
      {
        return send_notifyClients(callback, state);
      }

      public void End_notifyClients(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_notifyClients();
      }

      #endif

      public void notifyClients()
      {
        #if SILVERLIGHT
        var asyncResult = Begin_notifyClients(null, null);
        End_notifyClients(asyncResult);

        #else
        send_notifyClients();
        recv_notifyClients();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_notifyClients(AsyncCallback callback, object state)
      {
        oprot_.WriteMessageBegin(new TMessage("notifyClients", TMessageType.Call, seqid_));
        notifyClients_args args = new notifyClients_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_notifyClients()
      {
        oprot_.WriteMessageBegin(new TMessage("notifyClients", TMessageType.Call, seqid_));
        notifyClients_args args = new notifyClients_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public void recv_notifyClients()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        notifyClients_result result = new notifyClients_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

    }
    public class Processor : TProcessor {
      public Processor(ISync iface)
      {
        iface_ = iface;
        processMap_["validateLogIn"] = validateLogIn_Process;
        processMap_["findConcert"] = findConcert_Process;
        processMap_["sellTicket"] = sellTicket_Process;
        processMap_["canSellTicket"] = canSellTicket_Process;
        processMap_["getConcertDtosByDate"] = getConcertDtosByDate_Process;
        processMap_["getConcertDtos"] = getConcertDtos_Process;
        processMap_["updateConcert"] = updateConcert_Process;
        processMap_["notifyClients"] = notifyClients_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private ISync iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void validateLogIn_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        validateLogIn_args args = new validateLogIn_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        validateLogIn_result result = new validateLogIn_result();
        try
        {
          result.Success = iface_.validateLogIn(args.UserName, args.Password, args.Port);
          oprot.WriteMessageBegin(new TMessage("validateLogIn", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("validateLogIn", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void findConcert_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        findConcert_args args = new findConcert_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        findConcert_result result = new findConcert_result();
        try
        {
          result.Success = iface_.findConcert(args.Concert);
          oprot.WriteMessageBegin(new TMessage("findConcert", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("findConcert", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void sellTicket_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        sellTicket_args args = new sellTicket_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        sellTicket_result result = new sellTicket_result();
        try
        {
          result.Success = iface_.sellTicket(args.Concert, args.ClientName, args.Now, args.NumSeats);
          oprot.WriteMessageBegin(new TMessage("sellTicket", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("sellTicket", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void canSellTicket_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        canSellTicket_args args = new canSellTicket_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        canSellTicket_result result = new canSellTicket_result();
        try
        {
          result.Success = iface_.canSellTicket(args.ConcId, args.NumTickets);
          oprot.WriteMessageBegin(new TMessage("canSellTicket", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("canSellTicket", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getConcertDtosByDate_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getConcertDtosByDate_args args = new getConcertDtosByDate_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getConcertDtosByDate_result result = new getConcertDtosByDate_result();
        try
        {
          result.Success = iface_.getConcertDtosByDate(args.DateFilter);
          oprot.WriteMessageBegin(new TMessage("getConcertDtosByDate", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getConcertDtosByDate", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getConcertDtos_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getConcertDtos_args args = new getConcertDtos_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getConcertDtos_result result = new getConcertDtos_result();
        try
        {
          result.Success = iface_.getConcertDtos();
          oprot.WriteMessageBegin(new TMessage("getConcertDtos", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getConcertDtos", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateConcert_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateConcert_args args = new updateConcert_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateConcert_result result = new updateConcert_result();
        try
        {
          result.Success = iface_.updateConcert(args.Conc);
          oprot.WriteMessageBegin(new TMessage("updateConcert", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("updateConcert", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void notifyClients_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        notifyClients_args args = new notifyClients_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        notifyClients_result result = new notifyClients_result();
        try
        {
          iface_.notifyClients();
          oprot.WriteMessageBegin(new TMessage("notifyClients", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("notifyClients", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class validateLogIn_args : TBase
    {
      private string _userName;
      private string _password;
      private int _port;

      public string UserName
      {
        get
        {
          return _userName;
        }
        set
        {
          __isset.userName = true;
          this._userName = value;
        }
      }

      public string Password
      {
        get
        {
          return _password;
        }
        set
        {
          __isset.password = true;
          this._password = value;
        }
      }

      public int Port
      {
        get
        {
          return _port;
        }
        set
        {
          __isset.port = true;
          this._port = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userName;
        public bool password;
        public bool port;
      }

      public validateLogIn_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  UserName = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Password = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  Port = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("validateLogIn_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (UserName != null && __isset.userName) {
            field.Name = "userName";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(UserName);
            oprot.WriteFieldEnd();
          }
          if (Password != null && __isset.password) {
            field.Name = "password";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Password);
            oprot.WriteFieldEnd();
          }
          if (__isset.port) {
            field.Name = "port";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Port);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("validateLogIn_args(");
        bool __first = true;
        if (UserName != null && __isset.userName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserName: ");
          __sb.Append(UserName);
        }
        if (Password != null && __isset.password) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Password: ");
          __sb.Append(Password);
        }
        if (__isset.port) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Port: ");
          __sb.Append(Port);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class validateLogIn_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public validateLogIn_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("validateLogIn_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("validateLogIn_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class findConcert_args : TBase
    {
      private int _concert;

      public int Concert
      {
        get
        {
          return _concert;
        }
        set
        {
          __isset.concert = true;
          this._concert = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool concert;
      }

      public findConcert_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  Concert = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("findConcert_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.concert) {
            field.Name = "concert";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Concert);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("findConcert_args(");
        bool __first = true;
        if (__isset.concert) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Concert: ");
          __sb.Append(Concert);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class findConcert_result : TBase
    {
      private Concert _success;

      public Concert Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public findConcert_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new Concert();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("findConcert_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("findConcert_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sellTicket_args : TBase
    {
      private int _concert;
      private string _clientName;
      private string _now;
      private int _numSeats;

      public int Concert
      {
        get
        {
          return _concert;
        }
        set
        {
          __isset.concert = true;
          this._concert = value;
        }
      }

      public string ClientName
      {
        get
        {
          return _clientName;
        }
        set
        {
          __isset.clientName = true;
          this._clientName = value;
        }
      }

      public string Now
      {
        get
        {
          return _now;
        }
        set
        {
          __isset.now = true;
          this._now = value;
        }
      }

      public int NumSeats
      {
        get
        {
          return _numSeats;
        }
        set
        {
          __isset.numSeats = true;
          this._numSeats = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool concert;
        public bool clientName;
        public bool now;
        public bool numSeats;
      }

      public sellTicket_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  Concert = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  ClientName = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  Now = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I32) {
                  NumSeats = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("sellTicket_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.concert) {
            field.Name = "concert";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Concert);
            oprot.WriteFieldEnd();
          }
          if (ClientName != null && __isset.clientName) {
            field.Name = "clientName";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ClientName);
            oprot.WriteFieldEnd();
          }
          if (Now != null && __isset.now) {
            field.Name = "now";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Now);
            oprot.WriteFieldEnd();
          }
          if (__isset.numSeats) {
            field.Name = "numSeats";
            field.Type = TType.I32;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(NumSeats);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("sellTicket_args(");
        bool __first = true;
        if (__isset.concert) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Concert: ");
          __sb.Append(Concert);
        }
        if (ClientName != null && __isset.clientName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientName: ");
          __sb.Append(ClientName);
        }
        if (Now != null && __isset.now) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Now: ");
          __sb.Append(Now);
        }
        if (__isset.numSeats) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("NumSeats: ");
          __sb.Append(NumSeats);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sellTicket_result : TBase
    {
      private Ticket _success;

      public Ticket Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public sellTicket_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new Ticket();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("sellTicket_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("sellTicket_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class canSellTicket_args : TBase
    {
      private int _concId;
      private int _numTickets;

      public int ConcId
      {
        get
        {
          return _concId;
        }
        set
        {
          __isset.concId = true;
          this._concId = value;
        }
      }

      public int NumTickets
      {
        get
        {
          return _numTickets;
        }
        set
        {
          __isset.numTickets = true;
          this._numTickets = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool concId;
        public bool numTickets;
      }

      public canSellTicket_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  ConcId = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  NumTickets = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("canSellTicket_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.concId) {
            field.Name = "concId";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(ConcId);
            oprot.WriteFieldEnd();
          }
          if (__isset.numTickets) {
            field.Name = "numTickets";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(NumTickets);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("canSellTicket_args(");
        bool __first = true;
        if (__isset.concId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ConcId: ");
          __sb.Append(ConcId);
        }
        if (__isset.numTickets) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("NumTickets: ");
          __sb.Append(NumTickets);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class canSellTicket_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public canSellTicket_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("canSellTicket_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("canSellTicket_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getConcertDtosByDate_args : TBase
    {
      private string _dateFilter;

      public string DateFilter
      {
        get
        {
          return _dateFilter;
        }
        set
        {
          __isset.dateFilter = true;
          this._dateFilter = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool dateFilter;
      }

      public getConcertDtosByDate_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  DateFilter = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getConcertDtosByDate_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (DateFilter != null && __isset.dateFilter) {
            field.Name = "dateFilter";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(DateFilter);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getConcertDtosByDate_args(");
        bool __first = true;
        if (DateFilter != null && __isset.dateFilter) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("DateFilter: ");
          __sb.Append(DateFilter);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getConcertDtosByDate_result : TBase
    {
      private List<DTOConcert> _success;

      public List<DTOConcert> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getConcertDtosByDate_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<DTOConcert>();
                    TList _list0 = iprot.ReadListBegin();
                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                    {
                      DTOConcert _elem2;
                      _elem2 = new DTOConcert();
                      _elem2.Read(iprot);
                      Success.Add(_elem2);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getConcertDtosByDate_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (DTOConcert _iter3 in Success)
                {
                  _iter3.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getConcertDtosByDate_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getConcertDtos_args : TBase
    {

      public getConcertDtos_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getConcertDtos_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getConcertDtos_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getConcertDtos_result : TBase
    {
      private List<DTOConcert> _success;

      public List<DTOConcert> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getConcertDtos_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<DTOConcert>();
                    TList _list4 = iprot.ReadListBegin();
                    for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                    {
                      DTOConcert _elem6;
                      _elem6 = new DTOConcert();
                      _elem6.Read(iprot);
                      Success.Add(_elem6);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getConcertDtos_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (DTOConcert _iter7 in Success)
                {
                  _iter7.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getConcertDtos_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateConcert_args : TBase
    {
      private Concert _conc;

      public Concert Conc
      {
        get
        {
          return _conc;
        }
        set
        {
          __isset.conc = true;
          this._conc = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool conc;
      }

      public updateConcert_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Conc = new Concert();
                  Conc.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("updateConcert_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Conc != null && __isset.conc) {
            field.Name = "conc";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Conc.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateConcert_args(");
        bool __first = true;
        if (Conc != null && __isset.conc) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Conc: ");
          __sb.Append(Conc== null ? "<null>" : Conc.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateConcert_result : TBase
    {
      private Concert _success;

      public Concert Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public updateConcert_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new Concert();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("updateConcert_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("updateConcert_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class notifyClients_args : TBase
    {

      public notifyClients_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("notifyClients_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("notifyClients_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class notifyClients_result : TBase
    {

      public notifyClients_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("notifyClients_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("notifyClients_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
