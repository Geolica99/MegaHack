/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Lab2_Festival
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DTOConcert : TBase
  {
    private int _concertId;
    private string _artistName;
    private string _date;
    private string _locationName;
    private int _numOfSeats;
    private int _soldSeats;
    private int _freeSeats;

    public int ConcertId
    {
      get
      {
        return _concertId;
      }
      set
      {
        __isset.concertId = true;
        this._concertId = value;
      }
    }

    public string ArtistName
    {
      get
      {
        return _artistName;
      }
      set
      {
        __isset.artistName = true;
        this._artistName = value;
      }
    }

    public string Date
    {
      get
      {
        return _date;
      }
      set
      {
        __isset.date = true;
        this._date = value;
      }
    }

    public string LocationName
    {
      get
      {
        return _locationName;
      }
      set
      {
        __isset.locationName = true;
        this._locationName = value;
      }
    }

    public int NumOfSeats
    {
      get
      {
        return _numOfSeats;
      }
      set
      {
        __isset.numOfSeats = true;
        this._numOfSeats = value;
      }
    }

    public int SoldSeats
    {
      get
      {
        return _soldSeats;
      }
      set
      {
        __isset.soldSeats = true;
        this._soldSeats = value;
      }
    }

    public int FreeSeats
    {
      get
      {
        return _freeSeats;
      }
      set
      {
        __isset.freeSeats = true;
        this._freeSeats = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool concertId;
      public bool artistName;
      public bool date;
      public bool locationName;
      public bool numOfSeats;
      public bool soldSeats;
      public bool freeSeats;
    }

    public DTOConcert() {
    }

    public DTOConcert(int concertId, string artistName, string date, string locationName, int numOfSeats, int soldSeats, int freeSeats)
    {
        __isset.concertId = true;
        this._concertId = concertId;

        __isset.artistName = true;
        this._artistName = artistName;

        __isset.date = true;
        this._date = date;

        __isset.locationName = true;
        this._locationName = locationName;

            __isset.numOfSeats = true;
        this._numOfSeats = numOfSeats;

        __isset.soldSeats = true;
        this._soldSeats = soldSeats;

        __isset.freeSeats = true;
        this._freeSeats = freeSeats;
    }

        public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ConcertId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                ArtistName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Date = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                LocationName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                NumOfSeats = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                SoldSeats = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I32) {
                FreeSeats = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("DTOConcert");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.concertId) {
          field.Name = "concertId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ConcertId);
          oprot.WriteFieldEnd();
        }
        if (ArtistName != null && __isset.artistName) {
          field.Name = "artistName";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ArtistName);
          oprot.WriteFieldEnd();
        }
        if (Date != null && __isset.date) {
          field.Name = "date";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Date);
          oprot.WriteFieldEnd();
        }
        if (LocationName != null && __isset.locationName) {
          field.Name = "locationName";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(LocationName);
          oprot.WriteFieldEnd();
        }
        if (__isset.numOfSeats) {
          field.Name = "numOfSeats";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NumOfSeats);
          oprot.WriteFieldEnd();
        }
        if (__isset.soldSeats) {
          field.Name = "soldSeats";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(SoldSeats);
          oprot.WriteFieldEnd();
        }
        if (__isset.freeSeats) {
          field.Name = "freeSeats";
          field.Type = TType.I32;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(FreeSeats);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("DTOConcert(");
      bool __first = true;
      if (__isset.concertId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ConcertId: ");
        __sb.Append(ConcertId);
      }
      if (ArtistName != null && __isset.artistName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ArtistName: ");
        __sb.Append(ArtistName);
      }
      if (Date != null && __isset.date) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Date: ");
        __sb.Append(Date);
      }
      if (LocationName != null && __isset.locationName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LocationName: ");
        __sb.Append(LocationName);
      }
      if (__isset.numOfSeats) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NumOfSeats: ");
        __sb.Append(NumOfSeats);
      }
      if (__isset.soldSeats) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SoldSeats: ");
        __sb.Append(SoldSeats);
      }
      if (__isset.freeSeats) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FreeSeats: ");
        __sb.Append(FreeSeats);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
